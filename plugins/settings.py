#!/usr/bin/python3

import plugins
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QLabel, QGroupBox,
                            QGridLayout, QScrollArea, QCheckBox,
                            QComboBox, QPushButton)
from PyQt5.QtGui import QStandardItem, QIcon
from PyQt5.QtCore import Qt, QSize
import json
import os
import subprocess

de_settings = { "KDE": "systemsettings",
                "GNOME": "gnome-control-center",
                "MATE": "mate-control-center",
                "XFCE": "xfce4-settings-manager",
              }

class SettingsWidget(QWidget):
    def __init__(self):
        super().__init__()
        self.current_language = 'ru'
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–∂–µ—Ç—ã
        self.init_widgets()
        self.initUI()

    def init_widgets(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏


        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.autoUpdateCheck = QCheckBox()
        self.updateFreqCombo = QComboBox()
        update_frequencies = [self.tr('Daily'), self.tr('Weekly'), self.tr('Monthly')]
            # 'ru': ['–ï–∂–µ–¥–Ω–µ–≤–Ω–æ', '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ', '–ï–∂–µ–º–µ—Å—è—á–Ω–æ'],
            # 'en':

        self.updateFreqCombo.addItems(update_frequencies)

        self.notifyUpdatesCheck = QCheckBox()

    def initUI(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout()

        # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setFrameShape(QScrollArea.NoFrame)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        container = QWidget()
        layout = QVBoxLayout(container)
        layout.setSpacing(20)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≥—Ä—É–ø–ø
        group_titles = {
            # 'en': {
            'updates': self.tr("Updates"),
            'launch': self.tr("Advanced Settings")
            # },
            # 'ru': {
            #     'general': "–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            #     'updates': "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            #     'launch': "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            # }
        }


        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        labels = {
            # 'en': {
            'auto_update': self.tr("üîÑ Enable Auto-update"),
            'update_freq': self.tr("‚è∞ Update Frequency"),
            'notify': self.tr("üîî Notify About Updates")
            # },
            # 'ru': {
            #     'dark_mode': "üåô –¢—ë–º–Ω–∞—è —Ç–µ–º–∞",
            #     'language': "üåê –Ø–∑—ã–∫",
            #     'auto_update': "üîÑ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
            #     'update_freq': "‚è∞ –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π",
            #     'notify': "üîî –£–≤–µ–¥–æ–º–ª—è—Ç—å –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö"
            # }
        }

        # –ì—Ä—É–ø–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        updates = QGroupBox(group_titles['updates'])
        updates_grid = QGridLayout()
        updates_grid.setSpacing(10)

        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ updates_grid
        updates_grid.addWidget(QLabel(labels['auto_update']), 0, 0)
        updates_grid.addWidget(self.autoUpdateCheck, 0, 1)
        updates_grid.addWidget(QLabel(labels['update_freq']), 1, 0)
        updates_grid.addWidget(self.updateFreqCombo, 1, 1)
        updates_grid.addWidget(QLabel(labels['notify']), 2, 0)
        updates_grid.addWidget(self.notifyUpdatesCheck, 2, 1)

        updates.setLayout(updates_grid)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞–ø—É—Å–∫–∞
        launch = QGroupBox(group_titles['launch'])
        launch_grid = QGridLayout()
        launch_grid.setSpacing(10)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        apps = {
            # 'ru': [
            #     {
            #         'icon': 'center.png',
            #         'name': '–¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π',
            #         'command': 'acc',
            #         'tooltip': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á—ë—Ç–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏, —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∂—É—Ä–Ω–∞–ª—ã, –æ–±–Ω–æ–≤–ª–Ω–µ–Ω–∏–µ —è–¥—Ä–∞.'
            #     },
            #     {
            #         'icon': 'system.png',
            #         'name': '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã',
            #         'command': 'systemsettings5',
            #         'tooltip': '–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ, —Å–µ—Ç—å, –¥–∞—Ç–∞, –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–π —Å—Ä–µ–¥—ã.'
            #     },
            #     {
            #         'icon': 'info.png',
            #         'name': '–û —Å–∏—Å—Ç–µ–º–µ',
            #         'command': 'kinfocenter',
            #         'tooltip': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.'
            #     },
            #     {
            #         'icon': 'preferences-desktop-display',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–∫–æ–Ω–∫—É
            #         'name': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Ä–∞–Ω–∞',
            #         'command': 'kcmshell5 kcm_kscreen',
            #         'tooltip': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —ç–∫—Ä–∞–Ω–∞.'
            #     }
            # ],
            'en':[
                {
                    'icon': 'preferences',
                    'name': self.tr('User Settings'),
                    'command': '',
                    'tooltip': self.tr('General settings: power management, network, date, workspace behavior')
                },
                {
                    'icon': 'system',
                    'name': self.tr('System Control Center'),
                    'command': 'acc',
                    'tooltip': self.tr('User account management, system logs, kernel updates')
                },
             ]
        }

        # Set correct user settings program for current desktop environment
        current_de = os.environ['XDG_CURRENT_DESKTOP']
        if current_de in de_settings:
            apps['en'][0]['command'] = de_settings[current_de]

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        for i, app in enumerate(apps['en']):
            button = QPushButton()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É
            if app['icon'].endswith('.png'):
                icon_path = os.path.join('res', app['icon'])
                if os.path.exists(icon_path):
                    button.setIcon(QIcon(icon_path))
            else:
                button.setIcon(QIcon.fromTheme(app['icon']))

            button.setIconSize(QSize(32, 32))
            button.setText(app['name'])
            button.setToolTip(app['tooltip'])
            if app['command'] != '':
                button.clicked.connect(lambda checked, cmd=app['command']: self.launch_app(cmd))
            else:
                # Disable button
                button.setEnabled(False)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏
            button.setStyleSheet("""
                QPushButton {
                    text-align: left;
                    padding: 5px 10px;
                    min-width: 200px;
                    min-height: 40px;
                }
            """)

            launch_grid.addWidget(button, i // 2, i % 2)

        launch.setLayout(launch_grid)

        # –ü—Ä–∏–º–µ–Ω–µ–º —Å—Ç–∏–ª–∏
        style = """
            QPushButton {
                text-align: left;
                padding: 5px 10px;
            }
        """
        updates.setStyleSheet(style)
        launch.setStyleSheet(style)

        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –≤ layout
        #layout.addWidget(updates)
        layout.addWidget(launch)
        layout.addStretch()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll.setWidget(container)
        main_layout.addWidget(scroll)

        self.setLayout(main_layout)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.loadSettings()

    def loadSettings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists('settings.json'):
                with open('settings.json', 'r') as f:
                    settings = json.load(f)
                    self.autoUpdateCheck.setChecked(settings.get('auto_update', True))
                    self.updateFreqCombo.setCurrentText(settings.get('update_frequency', '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'))
                    self.notifyUpdatesCheck.setChecked(settings.get('notify_updates', True))
        except Exception as e:
            print(f"Error loading settings: {e}")

    def saveSettings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            settings = {
                'auto_update': self.autoUpdateCheck.isChecked(),
                'update_frequency': self.updateFreqCombo.currentText(),
                'notify_updates': self.notifyUpdatesCheck.isChecked()
            }

            with open('settings.json', 'w') as f:
                json.dump(settings, f, indent=4)
        except Exception as e:
            print(f"Error saving settings: {e}")

    def update_language(self, language):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.current_language = language
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if self.layout():
            QWidget().setLayout(self.layout())
        self.init_widgets()
        self.initUI()

    def launch_app(self, command):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            subprocess.Popen(command.split())
        except Exception as e:
            print(f"Error launching application: {e}")

class PluginSettings(plugins.Base):
    def __init__(self):
        super().__init__("settings", 40)
        self.node = None
        self.settings_widget = None

    def start(self, plist, pane):
        self.node = QStandardItem(self.tr("Settings"))
        self.node.setData(self.getName())
        plist.appendRow([self.node])

        self.settings_widget = SettingsWidget()
        index = pane.addWidget(self.settings_widget)
